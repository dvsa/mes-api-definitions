/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type TestSchema = StandardCarTestCATBSchema | StandardTrailerTestCATBESchema | LargeLorriesTestCATCSchema;

/**
 * Category B Schema
 */
export interface StandardCarTestCATBSchema {
  /**
   * Version number
   */
  version: string;
  /**
   * Category code for the test report
   */
  category: string;
  /**
   * Data brought through from the journal
   */
  journalData: {
    /**
     * The examiner details
     */
    examiner: {
      /**
       * The examiner's DSA staff number
       */
      staffNumber: string;
      /**
       * The individual ID of the examiner
       */
      individualId?: number;
    };
    /**
     * Details of the test centre
     */
    testCentre: {
      /**
       * Identifer for the test centre
       */
      centreId: number;
      /**
       * Cost centre code for the test centre
       */
      costCode: string;
      /**
       * Name of the test centre
       */
      centreName?: string;
    };
    /**
     * The additional attributes of the test slot such as Slot Id, Category, Start Time, etc.
     */
    testSlotAttributes: {
      /**
       * Unique identifier for the journal test slot
       */
      slotId: number;
      /**
       * Start time of the test slot
       */
      start: string;
      /**
       * A short alpha (and sometimes numeric) code describing the vehicle type in vehicle slot type
       */
      vehicleTypeCode: string;
      /**
       * Whether the test is to be conducted using the welsh language
       */
      welshTest: boolean;
      /**
       * Special needs code
       */
      specialNeedsCode?: "NONE" | "YES" | "EXTRA";
      /**
       * Whether the candidate has any special needs that require the D255 form to be completed
       */
      specialNeeds: boolean;
      /**
       * The special needs
       */
      specialNeedsArray?: string[];
      /**
       * Whether this is an extended test
       */
      extendedTest: boolean;
      /**
       * Whether the examiner conducting the test slot is visiting a test centre that's not their home test centre
       */
      examinerVisiting?: boolean;
      /**
       * Indicates whether the examiner needs to check the candidates entitlement evidence(e.g. test application has not been checked with DVLA)
       */
      entitlementCheck?: boolean;
      /**
       * The details of any previous test cancellations
       */
      previousCancellation?: ("Act of nature" | "DSA")[];
      /**
       * A description of the types of test intended to be conducted in this slot (e.g. Standard Test / Extended Special Needs Test)
       */
      slotType?: string;
    };
    /**
     * Details of the candidate booked into the test slot
     */
    candidate: {
      /**
       * The id of the test candidate
       */
      candidateId?: number;
      /**
       * Details of the individual's name
       */
      candidateName?: {
        /**
         * The individual's title
         */
        title?: string;
        /**
         * The individual's forename
         */
        firstName?: string;
        /**
         * The individual's second name
         */
        secondName?: string;
        /**
         * The individual's third name
         */
        thirdName?: string;
        /**
         * The individual's surname
         */
        lastName?: string;
      };
      /**
       * The candidate's driver number, typically (though not always) 16 characters if UK, or 8 digits if NI
       */
      driverNumber?: string;
      /**
       * The candidate's date of birth, formatted as an ISO 8601 date (YYYY-MM-DD)
       */
      dateOfBirth?: string;
      /**
       * The gender of an individual, limited to 'M' or 'F' as per TARS master data
       */
      gender?: "M" | "F";
      /**
       * Details of the address
       */
      candidateAddress?: {
        /**
         * First line of address
         */
        addressLine1?: string;
        /**
         * Second line of address
         */
        addressLine2?: string;
        /**
         * Third line of address
         */
        addressLine3?: string;
        /**
         * Fourth line of address
         */
        addressLine4?: string;
        /**
         * Fifth line of address
         */
        addressLine5?: string;
        /**
         * The address postcode
         */
        postcode?: string;
      };
      /**
       * The candidate's primary telephone number, if any (and consent to leave voicemail has been given)
       */
      primaryTelephone?: string;
      /**
       * The candidate's secondary telephone number, if any (and consent to leave voicemail has been given)
       */
      secondaryTelephone?: string;
      /**
       * The candidate's mobile telephone number, if any (and consent to leave voicemail has been given)
       */
      mobileTelephone?: string;
      /**
       * The candidate's email address, if any
       */
      emailAddress?: string;
      /**
       * The candidate's ADI PRN (potential register number), if an ADI test
       */
      prn?: number;
      /**
       * The number of previous test attempts, if an ADI test
       */
      previousADITests?: number;
      /**
       * A character between A and G representing different categories of ethnicity
       */
      ethnicityCode?: string;
    };
    /**
     * The full application identifier, including applicationId, bookingSequence and checkDigit
     */
    applicationReference: {
      /**
       * Unique identifier for each test application
       */
      applicationId: number;
      /**
       * Booking sequence number of the test application
       */
      bookingSequence: number;
      /**
       * Reference checksum for the test application
       */
      checkDigit: number;
    };
  };
  /**
   * Code representing the result of the test
   */
  activityCode:
    | "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "11"
    | "20"
    | "21"
    | "22"
    | "23"
    | "24"
    | "25"
    | "26"
    | "27"
    | "28"
    | "32"
    | "33"
    | "34"
    | "35"
    | "36"
    | "37"
    | "38"
    | "40"
    | "41"
    | "51"
    | "52"
    | "55"
    | "58"
    | "59"
    | "60"
    | "61"
    | "62"
    | "63"
    | "64"
    | "66"
    | "67"
    | "68"
    | "69"
    | "70"
    | "71"
    | "73"
    | "74"
    | "75"
    | "82"
    | "83";
  communicationPreferences?: {
    /**
     * The email address that the candidate agrees their results can be sent to
     */
    updatedEmail: string;
    /**
     * The method of communication by which the candidate agrees to receive their results
     */
    communicationMethod: "Email" | "Post" | "Support Centre" | "Not provided";
    /**
     * The language in which a candidate agrees to perform a test
     */
    conductedLanguage: "English" | "Cymraeg" | "Not provided";
  };
  preTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their test vehicle has a valid insurance policy
     */
    insuranceDeclarationAccepted: boolean;
    /**
     * Whether or not the candidate has declared that they have lived in the UK for a period acceptable for taking the test
     */
    residencyDeclarationAccepted: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    preTestSignature: string;
  };
  /**
   * Indicators for anybody else overseeing the test
   */
  accompaniment?: {
    /**
     * Indicates whether the ADI was present during the test
     */
    ADI?: boolean;
    /**
     * Indicates whether a DVSA supervisor was present during the test
     */
    supervisor?: boolean;
    /**
     * Indicates whether an interpreter was present during the test
     */
    interpreter?: boolean;
    /**
     * Indicates whether another individual was present during the test
     */
    other?: boolean;
  };
  /**
   * Details about the vehicle to be used for the test
   */
  vehicleDetails?: {
    /**
     * The vehicle registration number
     */
    registrationNumber?: string;
    /**
     * The type of gearbox
     */
    gearboxCategory?: "Manual" | "Automatic";
    /**
     * Indicates whether the vehicle belongs to a driving school
     */
    schoolCar?: boolean;
    /**
     * Indicates whether or not the vehicle has dual controls fitted
     */
    dualControls?: boolean;
  };
  /**
   * Details about the candidate's driving instructor
   */
  instructorDetails?: {
    /**
     * The instructor's registration number
     */
    registrationNumber?: number;
  };
  /**
   * Data associated with the test
   */
  testData?: {
    /**
     * Details of the Show Me and Tell Me questions asked during the test
     */
    vehicleChecks?: {
      tellMeQuestion?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      };
      showMeQuestion?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      };
      /**
       * Comments recorded against a fault
       */
      showMeTellMeComments?: string;
    };
    /**
     * The test requirements that must be carried out during a test
     */
    testRequirements?: {
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart1?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart2?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      angledStart?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      hillStart?: boolean;
    };
    /**
     * The manoeuvres that were carried out during the test and any faults recorded against them
     */
    manoeuvres?: {
      reverseRight?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
      reverseParkRoad?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
      reverseParkCarpark?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
      forwardPark?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
    };
    controlledStop?: {
      /**
       * Indicator for a manoeuvre being performed during the test
       */
      selected?: boolean;
      /**
       * The possible outcomes of any manoeuvre performed during the test
       */
      fault?: "DF" | "S" | "D";
      /**
       * Comments recorded against a fault
       */
      faultComments?: string;
    };
    /**
     * The driving faults accumulated during the test
     */
    drivingFaults?: {
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsAccelerator?: number;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsClutch?: number;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsGears?: number;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsFootbrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsParkingBrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsSteering?: number;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      precautions?: number;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      ancillaryControls?: number;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffSafety?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffControl?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsSignalling?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeDirection?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsNecessary?: number;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsCorrectly?: number;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsTimed?: number;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsApproachSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsObservation?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningRight?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningLeft?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsCuttingCorners?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementOvertaking?: number;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementMeeting?: number;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementCrossing?: number;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningNormalDriving?: number;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningLaneDiscipline?: number;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      clearance?: number;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      followingDistance?: number;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressAppropriateSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressUndueHesitation?: number;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficSigns?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsRoadMarkings?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficLights?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficControllers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsOtherRoadUsers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      pedestrianCrossings?: number;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positionNormalStops?: number;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      awarenessPlanning?: number;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The serious faults accumulated during the test
     */
    seriousFaults?: {
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The dangerous faults accumulated during the test
     */
    dangerousFaults?: {
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * Assessment of the eco friendly manner of driving
     */
    eco?: {
      /**
       * Indicates that the eco friendly manner of driving has been assessed
       */
      completed?: boolean;
      /**
       * Indicates that advice was given on the Control aspect of eco driving
       */
      adviceGivenControl?: boolean;
      /**
       * Indicates that advice was given on the Planning aspect of eco driving
       */
      adviceGivenPlanning?: boolean;
    };
    /**
     * Indicates whether the examiner had to take physical or verbal action during the test
     */
    ETA?: {
      /**
       * Indicates that the examiner had to take physical action
       */
      physical?: boolean;
      /**
       * Indicates that the examiner had to take verbal action
       */
      verbal?: boolean;
    };
    /**
     * Summary of the total number of each type of fault incurred during the test
     */
    faultSummary?: {
      /**
       * Count of the total number of driving faults incurred during the test
       */
      totalDrivingFaults?: number;
      /**
       * Count of the total number of serious faults incurred during the test
       */
      totalSeriousFaults?: number;
      /**
       * Count of the total number of dangerous faults incurred during the test
       */
      totalDangerousFaults?: number;
    };
    eyesightTest?: {
      complete?: boolean;
      /**
       * Whether the candidate has failed the eyesight test
       */
      seriousFault?: boolean;
      /**
       * Comments recorded against a fault
       */
      faultComments?: string;
    };
  };
  /**
   * Finalisation of a successful test outcome
   */
  passCompletion?: {
    /**
     * Indicates whether the candidate submitted their provisional driving licence
     */
    provisionalLicenceProvided: boolean;
    /**
     * The PCN issued to the candidate
     */
    passCertificateNumber: string;
  };
  postTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their health status hasn't changed since their last application
     */
    healthDeclarationAccepted?: boolean;
    /**
     * Indicates whether the candidate acknowledges receipt of the PCN
     */
    passCertificateNumberReceived?: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    postTestSignature?: string;
  };
  /**
   * Recording of other characteristics of the test
   */
  testSummary?: {
    /**
     * Number of the route that was taken during the test
     */
    routeNumber?: number;
    /**
     * Method chosen to conduct the independent driving section of the test
     */
    independentDriving?: "Sat nav" | "Traffic signs" | "N/A";
    /**
     * Physical description of the candidate
     */
    candidateDescription?: string;
    /**
     * Indicates whether anybody else (e.g. ADI) was present for the debrief
     */
    debriefWitnessed?: boolean;
    /**
     * Indicates which form of ID was provided by the candidate
     */
    identification?: "Licence" | "Passport";
    /**
     * Description of the type of weather encountered during the test
     */
    weatherConditions?: (
      | "Bright / dry roads"
      | "Bright / wet roads"
      | "Raining through test"
      | "Showers"
      | "Foggy / misty"
      | "Dull / wet roads"
      | "Dull / dry roads"
      | "Snowing"
      | "Icy"
      | "Windy")[];
    /**
     * Indicates whether a D255 form needs to be completed
     */
    D255?: boolean;
    /**
     * Any comments that the DE wants to record about the test
     */
    additionalInformation?: string;
    [k: string]: any;
  };
  /**
   * Recording of the rekey reason
   */
  rekeyReason?: {
    /**
     * Recording of if a rekey was due to a transfer
     */
    transfer?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
    };
    /**
     * Recording of if a rekey was due to a iPad issue
     */
    ipadIssue?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * If the iPad was not used due to a technical fault
       */
      technicalFault?: boolean;
      /**
       * If the iPad was not used as it has been lost
       */
      lost?: boolean;
      /**
       * If the iPad was not used as it has been stolen
       */
      stolen?: boolean;
      /**
       * If the iPad was not used as it is broken
       */
      broken?: boolean;
    };
    /**
     * Recording of if a rekey was due to a different reason
     */
    other?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * The reason this option was selected
       */
      reason?: string;
    };
  };
  /**
   * Whether the test was rekeyed or not
   */
  rekey: boolean;
  /**
   * Date the test was rekeyed
   */
  rekeyDate?: string;
  /**
   * Whether the test was conducted by another examiner
   */
  changeMarker: boolean;
  /**
   * The examiner who the test was booked to
   */
  examinerBooked: number;
  /**
   * The examiner who conducted the test
   */
  examinerConducted: number;
  /**
   * The examiner who keyed the test into the iPad
   */
  examinerKeyed: number;
}
/**
 * Category BE Schema
 */
export interface StandardTrailerTestCATBESchema {
  /**
   * Version number
   */
  version: string;
  /**
   * Category code for the test report
   */
  category: string;
  /**
   * Data brought through from the journal
   */
  journalData: {
    /**
     * The examiner details
     */
    examiner: {
      /**
       * The examiner's DSA staff number
       */
      staffNumber: string;
      /**
       * The individual ID of the examiner
       */
      individualId?: number;
    };
    /**
     * Details of the test centre
     */
    testCentre: {
      /**
       * Identifer for the test centre
       */
      centreId: number;
      /**
       * Cost centre code for the test centre
       */
      costCode: string;
      /**
       * Name of the test centre
       */
      centreName?: string;
    };
    /**
     * The additional attributes of the test slot such as Slot Id, Category, Start Time, etc.
     */
    testSlotAttributes: {
      /**
       * Unique identifier for the journal test slot
       */
      slotId: number;
      /**
       * Start time of the test slot
       */
      start: string;
      /**
       * A short alpha (and sometimes numeric) code describing the vehicle type in vehicle slot type
       */
      vehicleTypeCode: string;
      /**
       * Whether the test is to be conducted using the welsh language
       */
      welshTest: boolean;
      /**
       * Special needs code
       */
      specialNeedsCode?: "NONE" | "YES" | "EXTRA";
      /**
       * Whether the candidate has any special needs that require the D255 form to be completed
       */
      specialNeeds: boolean;
      /**
       * The special needs
       */
      specialNeedsArray?: string[];
      /**
       * Whether this is an extended test
       */
      extendedTest: boolean;
      /**
       * Whether the examiner conducting the test slot is visiting a test centre that's not their home test centre
       */
      examinerVisiting?: boolean;
      /**
       * Indicates whether the examiner needs to check the candidates entitlement evidence(e.g. test application has not been checked with DVLA)
       */
      entitlementCheck?: boolean;
      /**
       * The details of any previous test cancellations
       */
      previousCancellation?: ("Act of nature" | "DSA")[];
      /**
       * A description of the types of test intended to be conducted in this slot (e.g. Standard Test / Extended Special Needs Test)
       */
      slotType?: string;
    };
    /**
     * Details of the candidate booked into the test slot
     */
    candidate: {
      /**
       * The id of the test candidate
       */
      candidateId?: number;
      /**
       * Details of the individual's name
       */
      candidateName?: {
        /**
         * The individual's title
         */
        title?: string;
        /**
         * The individual's forename
         */
        firstName?: string;
        /**
         * The individual's second name
         */
        secondName?: string;
        /**
         * The individual's third name
         */
        thirdName?: string;
        /**
         * The individual's surname
         */
        lastName?: string;
      };
      /**
       * The candidate's driver number, typically (though not always) 16 characters if UK, or 8 digits if NI
       */
      driverNumber?: string;
      /**
       * The candidate's date of birth, formatted as an ISO 8601 date (YYYY-MM-DD)
       */
      dateOfBirth?: string;
      /**
       * The gender of an individual, limited to 'M' or 'F' as per TARS master data
       */
      gender?: "M" | "F";
      /**
       * Details of the address
       */
      candidateAddress?: {
        /**
         * First line of address
         */
        addressLine1?: string;
        /**
         * Second line of address
         */
        addressLine2?: string;
        /**
         * Third line of address
         */
        addressLine3?: string;
        /**
         * Fourth line of address
         */
        addressLine4?: string;
        /**
         * Fifth line of address
         */
        addressLine5?: string;
        /**
         * The address postcode
         */
        postcode?: string;
      };
      /**
       * The candidate's primary telephone number, if any (and consent to leave voicemail has been given)
       */
      primaryTelephone?: string;
      /**
       * The candidate's secondary telephone number, if any (and consent to leave voicemail has been given)
       */
      secondaryTelephone?: string;
      /**
       * The candidate's mobile telephone number, if any (and consent to leave voicemail has been given)
       */
      mobileTelephone?: string;
      /**
       * The candidate's email address, if any
       */
      emailAddress?: string;
      /**
       * The candidate's ADI PRN (potential register number), if an ADI test
       */
      prn?: number;
      /**
       * The number of previous test attempts, if an ADI test
       */
      previousADITests?: number;
      /**
       * A character between A and G representing different categories of ethnicity
       */
      ethnicityCode?: string;
      /**
       * Name of the business the candidate relates to
       */
      businessName?: string;
      /**
       * Telephone number of the business the candidate relates to
       */
      businessTelephone?: string;
      /**
       * Details of the address
       */
      businessAddress?: {
        /**
         * First line of address
         */
        addressLine1?: string;
        /**
         * Second line of address
         */
        addressLine2?: string;
        /**
         * Third line of address
         */
        addressLine3?: string;
        /**
         * Fourth line of address
         */
        addressLine4?: string;
        /**
         * Fifth line of address
         */
        addressLine5?: string;
        /**
         * The address postcode
         */
        postcode?: string;
      };
    };
    /**
     * The full application identifier, including applicationId, bookingSequence and checkDigit
     */
    applicationReference: {
      /**
       * Unique identifier for each test application
       */
      applicationId: number;
      /**
       * Booking sequence number of the test application
       */
      bookingSequence: number;
      /**
       * Reference checksum for the test application
       */
      checkDigit: number;
    };
  };
  /**
   * Code representing the result of the test
   */
  activityCode:
    | "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "11"
    | "20"
    | "21"
    | "22"
    | "23"
    | "24"
    | "25"
    | "26"
    | "27"
    | "28"
    | "32"
    | "33"
    | "34"
    | "35"
    | "36"
    | "37"
    | "38"
    | "40"
    | "41"
    | "51"
    | "52"
    | "55"
    | "58"
    | "59"
    | "60"
    | "61"
    | "62"
    | "63"
    | "64"
    | "66"
    | "67"
    | "68"
    | "69"
    | "70"
    | "71"
    | "73"
    | "74"
    | "75"
    | "82"
    | "83";
  communicationPreferences?: {
    /**
     * The email address that the candidate agrees their results can be sent to
     */
    updatedEmail: string;
    /**
     * The method of communication by which the candidate agrees to receive their results
     */
    communicationMethod: "Email" | "Post" | "Support Centre" | "Not provided";
    /**
     * The language in which a candidate agrees to perform a test
     */
    conductedLanguage: "English" | "Cymraeg" | "Not provided";
  };
  preTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their test vehicle has a valid insurance policy
     */
    insuranceDeclarationAccepted: boolean;
    /**
     * Whether or not the candidate has declared that they have lived in the UK for a period acceptable for taking the test
     */
    residencyDeclarationAccepted: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    preTestSignature: string;
  };
  /**
   * Indicators for anybody else overseeing the test
   */
  accompaniment?: {
    /**
     * Indicates whether the ADI was present during the test
     */
    ADI?: boolean;
    /**
     * Indicates whether a DVSA supervisor was present during the test
     */
    supervisor?: boolean;
    /**
     * Indicates whether an interpreter was present during the test
     */
    interpreter?: boolean;
    /**
     * Indicates whether another individual was present during the test
     */
    other?: boolean;
  };
  /**
   * Details about the vehicle to be used for the test
   */
  vehicleDetails?: {
    /**
     * The vehicle registration number
     */
    registrationNumber?: string;
    /**
     * The type of gearbox
     */
    gearboxCategory?: "Manual" | "Automatic";
    /**
     * Indicates whether the vehicle belongs to a driving school
     */
    schoolCar?: boolean;
    /**
     * Indicates whether or not the vehicle has dual controls fitted
     */
    dualControls?: boolean;
    /**
     * Indicates the height of the vehicle
     */
    vehicleHeight?: number;
    /**
     * Indicates the width of the vehicle
     */
    vehicleWidth?: number;
  };
  /**
   * Data associated with the test
   */
  testData?: {
    /**
     * Details of the Show Me and Tell Me questions asked during the test
     */
    vehicleChecks?: {
      tellMeQuestions?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      }[];
      showMeQuestion?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      }[];
      /**
       * Comments recorded against a fault
       */
      showMeTellMeComments?: string;
    };
    /**
     * The test requirements that must be carried out during a test
     */
    testRequirements?: {
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart1?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart2?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      angledStartControlledStop?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      uphillStart?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      downhillStart?: boolean;
    };
    /**
     * The manoeuvres that were carried out during the test and any faults recorded against them
     */
    manoeuvres?: {
      reverseLeft?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
    };
    uncoupleRecouple?: {
      /**
       * Indicator for a manoeuvre being performed during the test
       */
      selected?: boolean;
      /**
       * The possible outcomes of any manoeuvre performed during the test
       */
      fault?: "DF" | "S" | "D";
      /**
       * Comments recorded against a fault
       */
      faultComments?: string;
    };
    /**
     * The driving faults accumulated during the test
     */
    drivingFaults?: {
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsAccelerator?: number;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsClutch?: number;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsGears?: number;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsFootbrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsParkingBrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsSteering?: number;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      precautions?: number;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      ancillaryControls?: number;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffSafety?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffControl?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsSignalling?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeDirection?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsNecessary?: number;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsCorrectly?: number;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsTimed?: number;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsApproachSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsObservation?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningRight?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningLeft?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsCuttingCorners?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementOvertaking?: number;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementMeeting?: number;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementCrossing?: number;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningNormalDriving?: number;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningLaneDiscipline?: number;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      clearance?: number;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      followingDistance?: number;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressAppropriateSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressUndueHesitation?: number;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficSigns?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsRoadMarkings?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficLights?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficControllers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsOtherRoadUsers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      pedestrianCrossings?: number;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positionNormalStops?: number;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      awarenessPlanning?: number;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The serious faults accumulated during the test
     */
    seriousFaults?: {
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The dangerous faults accumulated during the test
     */
    dangerousFaults?: {
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * Assessment of the eco friendly manner of driving
     */
    eco?: {
      /**
       * Indicates that the eco friendly manner of driving has been assessed
       */
      completed?: boolean;
      /**
       * Indicates that advice was given on the Control aspect of eco driving
       */
      adviceGivenControl?: boolean;
      /**
       * Indicates that advice was given on the Planning aspect of eco driving
       */
      adviceGivenPlanning?: boolean;
    };
    /**
     * Indicates whether the examiner had to take physical or verbal action during the test
     */
    ETA?: {
      /**
       * Indicates that the examiner had to take physical action
       */
      physical?: boolean;
      /**
       * Indicates that the examiner had to take verbal action
       */
      verbal?: boolean;
    };
    /**
     * Summary of the total number of each type of fault incurred during the test
     */
    faultSummary?: {
      /**
       * Count of the total number of driving faults incurred during the test
       */
      totalDrivingFaults?: number;
      /**
       * Count of the total number of serious faults incurred during the test
       */
      totalSeriousFaults?: number;
      /**
       * Count of the total number of dangerous faults incurred during the test
       */
      totalDangerousFaults?: number;
    };
    eyesightTest?: {
      complete?: boolean;
      /**
       * Whether the candidate has failed the eyesight test
       */
      seriousFault?: boolean;
      /**
       * Comments recorded against a fault
       */
      faultComments?: string;
    };
  };
  /**
   * Finalisation of a successful test outcome
   */
  passCompletion?: {
    /**
     * Indicates whether the candidate submitted their provisional driving licence
     */
    provisionalLicenceProvided: boolean;
    /**
     * The PCN issued to the candidate
     */
    passCertificateNumber: string;
    /**
     * Indicate presence of code 78 (automatic) on candidates license
     */
    code78Present: boolean;
  };
  postTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their health status hasn't changed since their last application
     */
    healthDeclarationAccepted?: boolean;
    /**
     * Indicates whether the candidate acknowledges receipt of the PCN
     */
    passCertificateNumberReceived?: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    postTestSignature?: string;
  };
  /**
   * Recording of other characteristics of the test
   */
  testSummary?: {
    /**
     * Number of the route that was taken during the test
     */
    routeNumber?: number;
    /**
     * Method chosen to conduct the independent driving section of the test
     */
    independentDriving?: "Sat nav" | "Traffic signs" | "N/A";
    /**
     * Physical description of the candidate
     */
    candidateDescription?: string;
    /**
     * Indicates whether anybody else (e.g. ADI) was present for the debrief
     */
    debriefWitnessed?: boolean;
    /**
     * Indicates which form of ID was provided by the candidate
     */
    identification?: "Licence" | "Passport";
    /**
     * Description of the type of weather encountered during the test
     */
    weatherConditions?: (
      | "Bright / dry roads"
      | "Bright / wet roads"
      | "Raining through test"
      | "Showers"
      | "Foggy / misty"
      | "Dull / wet roads"
      | "Dull / dry roads"
      | "Snowing"
      | "Icy"
      | "Windy")[];
    /**
     * Indicates whether a D255 form needs to be completed
     */
    D255?: boolean;
    /**
     * Any comments that the DE wants to record about the test
     */
    additionalInformation?: string;
    [k: string]: any;
  };
  /**
   * Recording of the rekey reason
   */
  rekeyReason?: {
    /**
     * Recording of if a rekey was due to a transfer
     */
    transfer?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
    };
    /**
     * Recording of if a rekey was due to a iPad issue
     */
    ipadIssue?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * If the iPad was not used due to a technical fault
       */
      technicalFault?: boolean;
      /**
       * If the iPad was not used as it has been lost
       */
      lost?: boolean;
      /**
       * If the iPad was not used as it has been stolen
       */
      stolen?: boolean;
      /**
       * If the iPad was not used as it is broken
       */
      broken?: boolean;
    };
    /**
     * Recording of if a rekey was due to a different reason
     */
    other?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * The reason this option was selected
       */
      reason?: string;
    };
  };
  /**
   * Whether the test was rekeyed or not
   */
  rekey: boolean;
  /**
   * Date the test was rekeyed
   */
  rekeyDate?: string;
  /**
   * Whether the test was conducted by another examiner
   */
  changeMarker: boolean;
  /**
   * The examiner who the test was booked to
   */
  examinerBooked: number;
  /**
   * The examiner who conducted the test
   */
  examinerConducted: number;
  /**
   * The examiner who keyed the test into the iPad
   */
  examinerKeyed: number;
}
/**
 * Category C Schema
 */
export interface LargeLorriesTestCATCSchema {
  /**
   * Version number
   */
  version: string;
  /**
   * Category code for the test report
   */
  category: string;
  /**
   * Data brought through from the journal
   */
  journalData: {
    /**
     * The examiner details
     */
    examiner: {
      /**
       * The examiner's DSA staff number
       */
      staffNumber: string;
      /**
       * The individual ID of the examiner
       */
      individualId?: number;
    };
    /**
     * Details of the test centre
     */
    testCentre: {
      /**
       * Identifer for the test centre
       */
      centreId: number;
      /**
       * Cost centre code for the test centre
       */
      costCode: string;
      /**
       * Name of the test centre
       */
      centreName?: string;
    };
    /**
     * The additional attributes of the test slot such as Slot Id, Category, Start Time, etc.
     */
    testSlotAttributes: {
      /**
       * Unique identifier for the journal test slot
       */
      slotId: number;
      /**
       * Start time of the test slot
       */
      start: string;
      /**
       * A short alpha (and sometimes numeric) code describing the vehicle type in vehicle slot type
       */
      vehicleTypeCode: string;
      /**
       * Whether the test is to be conducted using the welsh language
       */
      welshTest: boolean;
      /**
       * Special needs code
       */
      specialNeedsCode?: "NONE" | "YES" | "EXTRA";
      /**
       * Whether the candidate has any special needs that require the D255 form to be completed
       */
      specialNeeds: boolean;
      /**
       * The special needs
       */
      specialNeedsArray?: string[];
      /**
       * Whether this is an extended test
       */
      extendedTest: boolean;
      /**
       * Whether the examiner conducting the test slot is visiting a test centre that's not their home test centre
       */
      examinerVisiting?: boolean;
      /**
       * Indicates whether the examiner needs to check the candidates entitlement evidence(e.g. test application has not been checked with DVLA)
       */
      entitlementCheck?: boolean;
      /**
       * The details of any previous test cancellations
       */
      previousCancellation?: ("Act of nature" | "DSA")[];
      /**
       * A description of the types of test intended to be conducted in this slot (e.g. Standard Test / Extended Special Needs Test)
       */
      slotType?: string;
    };
    /**
     * Details of the candidate booked into the test slot
     */
    candidate: {
      /**
       * The id of the test candidate
       */
      candidateId?: number;
      /**
       * Details of the individual's name
       */
      candidateName?: {
        /**
         * The individual's title
         */
        title?: string;
        /**
         * The individual's forename
         */
        firstName?: string;
        /**
         * The individual's second name
         */
        secondName?: string;
        /**
         * The individual's third name
         */
        thirdName?: string;
        /**
         * The individual's surname
         */
        lastName?: string;
      };
      /**
       * The candidate's driver number, typically (though not always) 16 characters if UK, or 8 digits if NI
       */
      driverNumber?: string;
      /**
       * The candidate's date of birth, formatted as an ISO 8601 date (YYYY-MM-DD)
       */
      dateOfBirth?: string;
      /**
       * The gender of an individual, limited to 'M' or 'F' as per TARS master data
       */
      gender?: "M" | "F";
      /**
       * Details of the address
       */
      candidateAddress?: {
        /**
         * First line of address
         */
        addressLine1?: string;
        /**
         * Second line of address
         */
        addressLine2?: string;
        /**
         * Third line of address
         */
        addressLine3?: string;
        /**
         * Fourth line of address
         */
        addressLine4?: string;
        /**
         * Fifth line of address
         */
        addressLine5?: string;
        /**
         * The address postcode
         */
        postcode?: string;
      };
      /**
       * The candidate's primary telephone number, if any (and consent to leave voicemail has been given)
       */
      primaryTelephone?: string;
      /**
       * The candidate's secondary telephone number, if any (and consent to leave voicemail has been given)
       */
      secondaryTelephone?: string;
      /**
       * The candidate's mobile telephone number, if any (and consent to leave voicemail has been given)
       */
      mobileTelephone?: string;
      /**
       * The candidate's email address, if any
       */
      emailAddress?: string;
      /**
       * The candidate's ADI PRN (potential register number), if an ADI test
       */
      prn?: number;
      /**
       * The number of previous test attempts, if an ADI test
       */
      previousADITests?: number;
      /**
       * A character between A and G representing different categories of ethnicity
       */
      ethnicityCode?: string;
      /**
       * Name of the business the candidate relates to
       */
      businessName?: string;
      /**
       * Telephone number of the business the candidate relates to
       */
      businessTelephone?: string;
      /**
       * Address of the business the candidate relates to
       */
      businessAddress?: {
        /**
         * First line of address
         */
        addressLine1?: string;
        /**
         * Second line of address
         */
        addressLine2?: string;
        /**
         * Third line of address
         */
        addressLine3?: string;
        /**
         * Fourth line of address
         */
        addressLine4?: string;
        /**
         * Fifth line of address
         */
        addressLine5?: string;
        /**
         * The address postcode
         */
        postcode?: string;
      };
    };
    /**
     * The full application identifier, including applicationId, bookingSequence and checkDigit
     */
    applicationReference: {
      /**
       * Unique identifier for each test application
       */
      applicationId: number;
      /**
       * Booking sequence number of the test application
       */
      bookingSequence: number;
      /**
       * Reference checksum for the test application
       */
      checkDigit: number;
    };
  };
  /**
   * Code representing the result of the test
   */
  activityCode:
    | "1"
    | "2"
    | "3"
    | "4"
    | "5"
    | "11"
    | "20"
    | "21"
    | "22"
    | "23"
    | "24"
    | "25"
    | "26"
    | "27"
    | "28"
    | "32"
    | "33"
    | "34"
    | "35"
    | "36"
    | "37"
    | "38"
    | "40"
    | "41"
    | "51"
    | "52"
    | "55"
    | "58"
    | "59"
    | "60"
    | "61"
    | "62"
    | "63"
    | "64"
    | "66"
    | "67"
    | "68"
    | "69"
    | "70"
    | "71"
    | "73"
    | "74"
    | "75"
    | "82"
    | "83";
  communicationPreferences?: {
    /**
     * The email address that the candidate agrees their results can be sent to
     */
    updatedEmail: string;
    /**
     * The method of communication by which the candidate agrees to receive their results
     */
    communicationMethod: "Email" | "Post" | "Support Centre" | "Not provided";
    /**
     * The language in which a candidate agrees to perform a test
     */
    conductedLanguage: "English" | "Cymraeg" | "Not provided";
  };
  preTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their test vehicle has a valid insurance policy
     */
    insuranceDeclarationAccepted: boolean;
    /**
     * Whether or not the candidate has declared that they have lived in the UK for a period acceptable for taking the test
     */
    residencyDeclarationAccepted: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    preTestSignature: string;
  };
  /**
   * Indicators for anybody else overseeing the test
   */
  accompaniment?: {
    /**
     * Indicates whether the ADI was present during the test
     */
    ADI?: boolean;
    /**
     * Indicates whether a DVSA supervisor was present during the test
     */
    supervisor?: boolean;
    /**
     * Indicates whether an interpreter was present during the test
     */
    interpreter?: boolean;
    /**
     * Indicates whether another individual was present during the test
     */
    other?: boolean;
  };
  /**
   * Details about the vehicle to be used for the test
   */
  vehicleDetails?: {
    /**
     * The vehicle registration number
     */
    registrationNumber?: string;
    /**
     * The type of gearbox
     */
    gearboxCategory?: "Manual" | "Automatic";
    /**
     * Indicates the height of the vehicle
     */
    vehicleHeight?: number;
    /**
     * Indicates the width of the vehicle
     */
    vehicleWidth?: number;
  };
  /**
   * Data associated with the test
   */
  testData?: {
    /**
     * Details of the Show Me and Tell Me questions asked during the test
     */
    vehicleChecks?: {
      tellMeQuestions?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      }[];
      showMeQuestion?: {
        /**
         * Code representing the question that was asked
         */
        code?: string;
        /**
         * Description of the question that was asked
         */
        description?: string;
        /**
         * Outcome of the question that was asked
         */
        outcome?: "P" | "DF" | "S" | "D";
      }[];
      /**
       * Comments recorded against a fault
       */
      showMeTellMeComments?: string;
    };
    /**
     * The test requirements that must be carried out during a test
     */
    testRequirements?: {
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart1?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      normalStart2?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      angledStartControlledStop?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      upHillStart?: boolean;
      /**
       * Indicates whether or not this test requirement was carried out
       */
      downHillStart?: boolean;
    };
    /**
     * The manoeuvres that were carried out during the test and any faults recorded against them
     */
    manoeuvres?: {
      reverseLeft?: {
        /**
         * Indicator for a manoeuvre being performed during the test
         */
        selected?: boolean;
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        controlFault?: "DF" | "S" | "D";
        /**
         * The possible outcomes of any manoeuvre performed during the test
         */
        observationFault?: "DF" | "S" | "D";
        /**
         * Comments recorded against a fault
         */
        controlFaultComments?: string;
        /**
         * Comments recorded against a fault
         */
        observationFaultComments?: string;
      };
    };
    /**
     * The driving faults accumulated during the test
     */
    drivingFaults?: {
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsAccelerator?: number;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsClutch?: number;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsGears?: number;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsFootbrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsParkingBrake?: number;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      controlsSteering?: number;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      precautions?: number;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      ancillaryControls?: number;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffSafety?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      moveOffControl?: number;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsSignalling?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeDirection?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfMirrorsChangeSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsNecessary?: number;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsCorrectly?: number;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      signalsTimed?: number;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsApproachSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsObservation?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningRight?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsTurningLeft?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      junctionsCuttingCorners?: number;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementOvertaking?: number;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementMeeting?: number;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      judgementCrossing?: number;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningNormalDriving?: number;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positioningLaneDiscipline?: number;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      clearance?: number;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      followingDistance?: number;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      useOfSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressAppropriateSpeed?: number;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      progressUndueHesitation?: number;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficSigns?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsRoadMarkings?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficLights?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsTrafficControllers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      responseToSignsOtherRoadUsers?: number;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      pedestrianCrossings?: number;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      positionNormalStops?: number;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * The count of the number of driving faults recorded against a test element
       */
      awarenessPlanning?: number;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The serious faults accumulated during the test
     */
    seriousFaults?: {
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a serious fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * The dangerous faults accumulated during the test
     */
    dangerousFaults?: {
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsAccelerator?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsAcceleratorComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsClutch?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsClutchComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsGears?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsGearsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsFootbrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsFootbrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsParkingBrake?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsParkingBrakeComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      controlsSteering?: boolean;
      /**
       * Comments recorded against a fault
       */
      controlsSteeringComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      precautions?: boolean;
      /**
       * Comments recorded against a fault
       */
      precautionsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      ancillaryControls?: boolean;
      /**
       * Comments recorded against a fault
       */
      ancillaryControlsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffSafety?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffSafetyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      moveOffControl?: boolean;
      /**
       * Comments recorded against a fault
       */
      moveOffControlComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsSignalling?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsSignallingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeDirection?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeDirectionComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfMirrorsChangeSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfMirrorsChangeSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsNecessary?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsNecessaryComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsCorrectly?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsCorrectlyComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      signalsTimed?: boolean;
      /**
       * Comments recorded against a fault
       */
      signalsTimedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsApproachSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsApproachSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsObservation?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsObservationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningRight?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningRightComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsTurningLeft?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsTurningLeftComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      junctionsCuttingCorners?: boolean;
      /**
       * Comments recorded against a fault
       */
      junctionsCuttingCornersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementOvertaking?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementOvertakingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementMeeting?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementMeetingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      judgementCrossing?: boolean;
      /**
       * Comments recorded against a fault
       */
      judgementCrossingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningNormalDriving?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningNormalDrivingComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positioningLaneDiscipline?: boolean;
      /**
       * Comments recorded against a fault
       */
      positioningLaneDisciplineComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      clearance?: boolean;
      /**
       * Comments recorded against a fault
       */
      clearanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      followingDistance?: boolean;
      /**
       * Comments recorded against a fault
       */
      followingDistanceComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      useOfSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      useOfSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressAppropriateSpeed?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressAppropriateSpeedComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      progressUndueHesitation?: boolean;
      /**
       * Comments recorded against a fault
       */
      progressUndueHesitationComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficSigns?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficSignsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsRoadMarkings?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsRoadMarkingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficLights?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficLightsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsTrafficControllers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsTrafficControllersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      responseToSignsOtherRoadUsers?: boolean;
      /**
       * Comments recorded against a fault
       */
      responseToSignsOtherRoadUsersComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      pedestrianCrossings?: boolean;
      /**
       * Comments recorded against a fault
       */
      pedestrianCrossingsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      positionNormalStops?: boolean;
      /**
       * Comments recorded against a fault
       */
      positionNormalStopsComments?: string;
      /**
       * Indicator for a dangerous fault being recorded against a test element
       */
      awarenessPlanning?: boolean;
      /**
       * Comments recorded against a fault
       */
      awarenessPlanningComments?: string;
    };
    /**
     * Assessment of the eco friendly manner of driving
     */
    eco?: {
      /**
       * Indicates that the eco friendly manner of driving has been assessed
       */
      completed?: boolean;
      /**
       * Indicates that advice was given on the Control aspect of eco driving
       */
      adviceGivenControl?: boolean;
      /**
       * Indicates that advice was given on the Planning aspect of eco driving
       */
      adviceGivenPlanning?: boolean;
    };
    /**
     * Indicates whether the examiner had to take physical or verbal action during the test
     */
    ETA?: {
      /**
       * Indicates that the examiner had to take physical action
       */
      physical?: boolean;
      /**
       * Indicates that the examiner had to take verbal action
       */
      verbal?: boolean;
    };
    /**
     * Summary of the total number of each type of fault incurred during the test
     */
    faultSummary?: {
      /**
       * Count of the total number of driving faults incurred during the test
       */
      totalDrivingFaults?: number;
      /**
       * Count of the total number of serious faults incurred during the test
       */
      totalSeriousFaults?: number;
      /**
       * Count of the total number of dangerous faults incurred during the test
       */
      totalDangerousFaults?: number;
    };
  };
  /**
   * Finalisation of a successful test outcome
   */
  passCompletion?: {
    /**
     * Indicates whether the candidate submitted their provisional driving licence
     */
    provisionalLicenceProvided: boolean;
    /**
     * The PCN issued to the candidate
     */
    passCertificateNumber: string;
    /**
     * Indicate presence of code 78 (automatic) on candidates license
     */
    code78Present: boolean;
  };
  postTestDeclarations?: {
    /**
     * Whether or not the candidate has declared that their health status hasn't changed since their last application
     */
    healthDeclarationAccepted?: boolean;
    /**
     * Indicates whether the candidate acknowledges receipt of the PCN
     */
    passCertificateNumberReceived?: boolean;
    /**
     * Base 64 encoded binary data representing a PNG image of the candidates signature
     */
    postTestSignature?: string;
  };
  /**
   * Recording of other characteristics of the test
   */
  testSummary?: {
    /**
     * Number of the route that was taken during the test
     */
    routeNumber?: number;
    /**
     * Method chosen to conduct the independent driving section of the test
     */
    independentDriving?: "Sat nav" | "Traffic signs" | "N/A";
    /**
     * Physical description of the candidate
     */
    candidateDescription?: string;
    /**
     * Indicates whether anybody else (e.g. ADI) was present for the debrief
     */
    debriefWitnessed?: boolean;
    /**
     * Indicates which form of ID was provided by the candidate
     */
    identification?: "Licence" | "Passport";
    /**
     * Description of the type of weather encountered during the test
     */
    weatherConditions?: (
      | "Bright / dry roads"
      | "Bright / wet roads"
      | "Raining through test"
      | "Showers"
      | "Foggy / misty"
      | "Dull / wet roads"
      | "Dull / dry roads"
      | "Snowing"
      | "Icy"
      | "Windy")[];
    /**
     * Indicates whether a D255 form needs to be completed
     */
    D255?: boolean;
    /**
     * Any comments that the DE wants to record about the test
     */
    additionalInformation?: string;
    [k: string]: any;
  };
  /**
   * Recording of the rekey reason
   */
  rekeyReason?: {
    /**
     * Recording of if a rekey was due to a transfer
     */
    transfer?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
    };
    /**
     * Recording of if a rekey was due to a iPad issue
     */
    ipadIssue?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * If the iPad was not used due to a technical fault
       */
      technicalFault?: boolean;
      /**
       * If the iPad was not used as it has been lost
       */
      lost?: boolean;
      /**
       * If the iPad was not used as it has been stolen
       */
      stolen?: boolean;
      /**
       * If the iPad was not used as it is broken
       */
      broken?: boolean;
    };
    /**
     * Recording of if a rekey was due to a different reason
     */
    other?: {
      /**
       * If this option was selected
       */
      selected?: boolean;
      /**
       * The reason this option was selected
       */
      reason?: string;
    };
  };
  /**
   * Whether the test was rekeyed or not
   */
  rekey: boolean;
  /**
   * Date the test was rekeyed
   */
  rekeyDate?: string;
  /**
   * Whether the test was conducted by another examiner
   */
  changeMarker: boolean;
  /**
   * The examiner who the test was booked to
   */
  examinerBooked: number;
  /**
   * The examiner who conducted the test
   */
  examinerConducted: number;
  /**
   * The examiner who keyed the test into the iPad
   */
  examinerKeyed: number;
}
