/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface StandardCarTestCATBSchema {
  /**
   * Category code for the test report
   */
  category: string;
  /**
   * Unique identifier for the test
   */
  id: string;
  /**
   * Unique identifier for the journal test slot
   */
  slotId?: number;
  /**
   * Code representing the result of the test
   */
  activityCode?: string;
  candidate: Candidate;
  testData: TestData;
  preTestDeclarations: PreTestDeclarations;
}
/**
 * Details of the candidate booked into the test slot
 */
export interface Candidate {
  /**
   * The id of the test candidate
   */
  candidateId?: number;
  candidateName?: Name;
  /**
   * The candidate's driver number if any, typically (though not always) 16 characters if UK, or 8 digits if NI
   */
  driverNumber?: string;
  candidateAddress?: Address;
  /**
   * The candidate's primary telephone number, if any (and consent to leave voicemail has been given)
   */
  primaryTelephone?: string;
  /**
   * The candidate's secondary telephone number, if any (and consent to leave voicemail has been given)
   */
  secondaryTelephone?: string;
  /**
   * The candidate's mobile telephone number, if any (and consent to leave voicemail has been given)
   */
  mobileTelephone?: string;
  /**
   * The candidate's email address, if any
   */
  emailAddress?: string;
  /**
   * The candidate's ADI PRN (potential register number), if an ADI test
   */
  prn?: number;
  /**
   * The number of previous test attempts, if an ADI test
   */
  previousADITests?: number;
}
/**
 * Details of the individual's name
 */
export interface Name {
  /**
   * The individual's title
   */
  title?: string;
  /**
   * The individual's forename
   */
  firstName?: string;
  /**
   * The individual's second name
   */
  secondName?: string;
  /**
   * The individual's third name
   */
  thirdName?: string;
  /**
   * The individual's surname
   */
  lastName?: string;
}
/**
 * Details of the address
 */
export interface Address {
  /**
   * First line of address
   */
  addressLine1?: string;
  /**
   * Second line of address
   */
  addressLine2?: string;
  /**
   * Third line of address
   */
  addressLine3?: string;
  /**
   * Fourth line of address
   */
  addressLine4?: string;
  /**
   * Fifth line of address
   */
  addressLine5?: string;
  /**
   * The address postcode
   */
  postcode?: string;
}
/**
 * Data associated with the test
 */
export interface TestData {
  /**
   * The test requirements that must be carried out during a test
   */
  testRequirements?: {
    /**
     * Indicates whether or not this test requirement was carried out
     */
    normalStart1?: boolean;
    /**
     * Indicates whether or not this test requirement was carried out
     */
    normalStart2?: boolean;
    /**
     * Indicates whether or not this test requirement was carried out
     */
    angledStart?: boolean;
    /**
     * Indicates whether or not this test requirement was carried out
     */
    hillStart?: boolean;
  };
  /**
   * The manoeuvres that were carried out during the test and any faults recorded against them
   */
  manoeuvres?: {
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedReverseLeft?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseLeftControl?: "DF" | "S" | "D";
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseLeftObservation?: "DF" | "S" | "D";
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedReverseRight?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseRightControl?: "DF" | "S" | "D";
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseRightObservation?: "DF" | "S" | "D";
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedReverseParkRoad?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseParkRoadControl?: "DF" | "S" | "D";
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseParkRoadObservation?: "DF" | "S" | "D";
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedReverseParkCarpark?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseParkCarparkControl?: "DF" | "S" | "D";
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeReverseParkCarparkObservation?: "DF" | "S" | "D";
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedForwardPark?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeForwardParkControl?: "DF" | "S" | "D";
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeForwardParkObservation?: "DF" | "S" | "D";
    /**
     * Indicates whether or not this manoeuvre was carried out
     */
    selectedControlledStop?: boolean;
    /**
     * Outcome of the manoeuvre - DF/S/D
     */
    outcomeControlledStop?: "DF" | "S" | "D";
  };
  /**
   * The driving faults accumulated during the test
   */
  drivingFaults?: {
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsAccelerator?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsClutch?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsGears?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsFootbrake?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsParkingBrake?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    controlsSteering?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    precautions?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    ancillaryControls?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    moveOffSafety?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    moveOffControl?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    useOfMirrorsSignalling?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    useOfMirrorsChangeDirection?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    useOfMirrorsChangeSpeed?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    signalsNecessary?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    signalsCorrectly?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    signalsTimed?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    junctionsApproachSpeed?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    junctionsObservation?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    junctionsTurningRight?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    junctionsTurningLeft?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    junctionsCuttingCorners?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    judgementOvertaking?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    judgementMeeting?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    judgementCrossing?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    positioningNormalDriving?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    positioningLaneDiscipline?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    clearance?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    followingDistance?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    useOfSpeed?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    progressAppropriateSpeed?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    progressUndueHesitation?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    responseToSignsTrafficSigns?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    responseToSignsRoadMarkings?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    responseToSignsTrafficLights?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    responseToSignsTrafficControllers?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    responseToSignsOtherRoadUsers?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    pedestrianCrossings?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    positionNormalStops?: number;
    /**
     * Count of the number of driving faults recorded against this test element
     */
    awarenessPlanning?: number;
  };
  /**
   * The serious faults accumulated during the test
   */
  seriousFaults?: {
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsAccelerator?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsClutch?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsGears?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsFootbrake?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsParkingBrake?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    controlsSteering?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    precautions?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    ancillaryControls?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    moveOffSafety?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    moveOffControl?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    useOfMirrorsSignalling?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    useOfMirrorsChangeDirection?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    useOfMirrorsChangeSpeed?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    signalsNecessary?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    signalsCorrectly?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    signalsTimed?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    junctionsApproachSpeed?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    junctionsObservation?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    junctionsTurningRight?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    junctionsTurningLeft?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    junctionsCuttingCorners?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    judgementOvertaking?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    judgementMeeting?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    judgementCrossing?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    positioningNormalDriving?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    positioningLaneDiscipline?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    clearance?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    followingDistance?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    useOfSpeed?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    progressAppropriateSpeed?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    progressUndueHesitation?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    responseToSignsTrafficSigns?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    responseToSignsRoadMarkings?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    responseToSignsTrafficLights?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    responseToSignsTrafficControllers?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    responseToSignsOtherRoadUsers?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    pedestrianCrossings?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    positionNormalStops?: boolean;
    /**
     * Indicates whether a serious fault was recorded against this test element
     */
    awarenessPlanning?: boolean;
  };
  /**
   * The dangerous faults accumulated during the test
   */
  dangerousFaults?: {
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsAccelerator?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsClutch?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsGears?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsFootbrake?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsParkingBrake?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    controlsSteering?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    precautions?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    ancillaryControls?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    moveOffSafety?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    moveOffControl?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    useOfMirrorsSignalling?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    useOfMirrorsChangeDirection?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    useOfMirrorsChangeSpeed?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    signalsNecessary?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    signalsCorrectly?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    signalsTimed?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    junctionsApproachSpeed?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    junctionsObservation?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    junctionsTurningRight?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    junctionsTurningLeft?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    junctionsCuttingCorners?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    judgementOvertaking?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    judgementMeeting?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    judgementCrossing?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    positioningNormalDriving?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    positioningLaneDiscipline?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    clearance?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    followingDistance?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    useOfSpeed?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    progressAppropriateSpeed?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    progressUndueHesitation?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    responseToSignsTrafficSigns?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    responseToSignsRoadMarkings?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    responseToSignsTrafficLights?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    responseToSignsTrafficControllers?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    responseToSignsOtherRoadUsers?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    pedestrianCrossings?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    positionNormalStops?: boolean;
    /**
     * Indicates whether a dangerous fault was recorded against this test element
     */
    awarenessPlanning?: boolean;
  };
}
export interface PreTestDeclarations {
  /**
   * Whether or not the candidate has declared that their test vehicle has a valid insurance policy
   */
  insuranceDeclarationAccepted: boolean;
  /**
   * Whether or not the candidate has declared that they have lived in the UK for a period acceptable for taking the test
   */
  residencyDeclarationAccepted: boolean;
  /**
   * Base 64 encoded binary data representing a PNG image of the candidates signature
   */
  signature: string;
}
