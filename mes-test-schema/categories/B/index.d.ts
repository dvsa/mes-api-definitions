/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Base 64 encoded binary data representing a PNG image of the candidates signature
 */
export type Signature = string;
/**
 * Outcome of the Eyesight Test
 */
export type EyesightTestResult = "P" | "F";
/**
 * The type of gearbox
 */
export type GearboxCategory = "Manual" | "Automatic";
/**
 * Code representing the question that was asked
 */
export type QuestionCode = string;
/**
 * Description of the question that was asked
 */
export type QuestionDescription = string;
/**
 * Outcome of the question that was asked
 */
export type QuestionOutcome = "P" | "DF" | "S" | "D";
/**
 * Indicator for a manoeuvre being performed during the test
 */
export type ManoeuvreIndicator = boolean;
/**
 * The possible outcomes of any manoeuvre performed during the test
 */
export type ManoeuvreOutcome = "DF" | "S" | "D";
/**
 * The count of the number of driving faults recorded against a test element
 */
export type DrivingFaultCount = number;
/**
 * Comments recorded against a fault
 */
export type FaultComments = string;
/**
 * Indicator for a serious fault being recorded against a test element
 */
export type SeriousFaultIndicator = boolean;
/**
 * Indicator for a dangerous fault being recorded against a test element
 */
export type DangerousFaultIndicator = boolean;
/**
 * Predefined values for the type of weather encountered during the test
 */
export type WeatherConditions =
  | "Bright / dry roads"
  | "Bright / wet roads"
  | "Raining through test"
  | "Showers"
  | "Foggy / misty"
  | "Dull / wet roads"
  | "Dull / dry roads"
  | "Snowing"
  | "Icy"
  | "Windy";

export interface StandardCarTestCATBSchema {
  /**
   * Category code for the test report
   */
  category: string;
  /**
   * Unique identifier for the test
   */
  id: string;
  journalData: JournalData;
  /**
   * Code representing the result of the test
   */
  activityCode: string;
  preTestDeclarations?: PreTestDeclarations;
  eyesightTestResult?: EyesightTestResult;
  accompaniment?: Accompaniment;
  vehicleDetails?: VehicleDetails;
  instructorDetails?: InstructorDetails;
  testData?: TestData;
  passCompletion?: PassCompletion;
  postTestDeclarations?: PostTestDeclarations;
  testSummary?: TestSummary;
}
/**
 * Data brought through from the journal
 */
export interface JournalData {
  examiner: Examiner;
  testCentre: TestCentre;
  testSlotAttributes: TestSlotAttributes;
  candidate: Candidate;
  applicationReference: ApplicationReference;
}
/**
 * The examiner details
 */
export interface Examiner {
  /**
   * The examiner's DSA staff number
   */
  staffNumber: string;
}
/**
 * Details of the test centre
 */
export interface TestCentre {
  /**
   * Cost centre code for the test centre
   */
  costCode: string;
}
/**
 * The additional attributes of the test slot such as Slot Id, Category, Start Time, etc.
 */
export interface TestSlotAttributes {
  /**
   * Unique identifier for the journal test slot
   */
  slotId: number;
  /**
   * Start time of the test slot
   */
  start: string;
  /**
   * A short description of the Vehicle Slot Type, e.g. B57mins, Voc90mins, Hometest
   */
  vehicleSlotType: string;
  /**
   * Whether the test is to be conducted using the welsh language
   */
  welshTest: boolean;
  /**
   * Whether the candidate has any special needs that require the D255 form to be completed
   */
  specialNeeds: boolean;
  /**
   * Whether this is an extended test
   */
  extendedTest: boolean;
}
/**
 * Details of the candidate booked into the test slot
 */
export interface Candidate {
  /**
   * The id of the test candidate
   */
  candidateId?: number;
  candidateName?: Name;
  /**
   * The candidate's driver number, typically (though not always) 16 characters if UK, or 8 digits if NI
   */
  driverNumber?: string;
  candidateAddress?: Address;
  /**
   * The candidate's primary telephone number, if any (and consent to leave voicemail has been given)
   */
  primaryTelephone?: string;
  /**
   * The candidate's secondary telephone number, if any (and consent to leave voicemail has been given)
   */
  secondaryTelephone?: string;
  /**
   * The candidate's mobile telephone number, if any (and consent to leave voicemail has been given)
   */
  mobileTelephone?: string;
  /**
   * The candidate's email address, if any
   */
  emailAddress?: string;
  /**
   * The candidate's ADI PRN (potential register number), if an ADI test
   */
  prn?: number;
  /**
   * The number of previous test attempts, if an ADI test
   */
  previousADITests?: number;
}
/**
 * Details of the individual's name
 */
export interface Name {
  /**
   * The individual's title
   */
  title?: string;
  /**
   * The individual's forename
   */
  firstName?: string;
  /**
   * The individual's second name
   */
  secondName?: string;
  /**
   * The individual's third name
   */
  thirdName?: string;
  /**
   * The individual's surname
   */
  lastName?: string;
}
/**
 * Details of the address
 */
export interface Address {
  /**
   * First line of address
   */
  addressLine1?: string;
  /**
   * Second line of address
   */
  addressLine2?: string;
  /**
   * Third line of address
   */
  addressLine3?: string;
  /**
   * Fourth line of address
   */
  addressLine4?: string;
  /**
   * Fifth line of address
   */
  addressLine5?: string;
  /**
   * The address postcode
   */
  postcode?: string;
}
/**
 * The full application identifier, including applicationId, bookingSequence and checkDigit
 */
export interface ApplicationReference {
  /**
   * Unique identifier for each test application
   */
  applicationId: number;
  /**
   * Booking sequence number of the test application
   */
  bookingSequence: number;
  /**
   * Reference checksum for the test application
   */
  checkDigit: number;
}
export interface PreTestDeclarations {
  /**
   * Whether or not the candidate has declared that their test vehicle has a valid insurance policy
   */
  insuranceDeclarationAccepted: boolean;
  /**
   * Whether or not the candidate has declared that they have lived in the UK for a period acceptable for taking the test
   */
  residencyDeclarationAccepted: boolean;
  preTestSignature: Signature;
}
/**
 * Indicators for anybody else overseeing the test
 */
export interface Accompaniment {
  /**
   * Indicates whether the ADI was present during the test
   */
  ADI?: boolean;
  /**
   * Indicates whether a DVSA supervisor was present during the test
   */
  supervisor?: boolean;
  /**
   * Indicates whether another individual was present during the test
   */
  other?: boolean;
}
/**
 * Details about the vehicle to be used for the test
 */
export interface VehicleDetails {
  /**
   * The vehicle registration number
   */
  registrationNumber?: string;
  gearboxCategory?: GearboxCategory;
  /**
   * Indicates whether the vehicle belongs to a driving school
   */
  schoolCar?: boolean;
  /**
   * Indicates whether or not the vehicle has dual controls fitted
   */
  dualControls?: boolean;
}
/**
 * Details about the candidate's driving instructor
 */
export interface InstructorDetails {
  /**
   * The instructor's registration number
   */
  registrationNumber?: number;
}
/**
 * Data associated with the test
 */
export interface TestData {
  vehicleChecks?: VehicleChecks;
  testRequirements?: TestRequirements;
  manoeuvres?: Manoeuvres;
  drivingFaults?: DrivingFaults;
  seriousFaults?: SeriousFaults;
  dangerousFaults?: DangerousFaults;
  eco?: Eco;
  ETA?: ETA;
  faultSummary?: FaultSummary;
}
/**
 * Details of the Show Me and Tell Me questions asked during the test
 */
export interface VehicleChecks {
  tellMeQuestionCode?: QuestionCode;
  tellMeQuestionDescription?: QuestionDescription;
  tellMeQuestionOutcome?: QuestionOutcome;
  showMeQuestionCode?: QuestionCode;
  showMeQuestionDescription?: QuestionDescription;
  showMeQuestionOutcome?: QuestionOutcome;
}
/**
 * The test requirements that must be carried out during a test
 */
export interface TestRequirements {
  /**
   * Indicates whether or not this test requirement was carried out
   */
  normalStart1?: boolean;
  /**
   * Indicates whether or not this test requirement was carried out
   */
  normalStart2?: boolean;
  /**
   * Indicates whether or not this test requirement was carried out
   */
  angledStart?: boolean;
  /**
   * Indicates whether or not this test requirement was carried out
   */
  hillStart?: boolean;
}
/**
 * The manoeuvres that were carried out during the test and any faults recorded against them
 */
export interface Manoeuvres {
  selectedReverseLeft?: ManoeuvreIndicator;
  outcomeReverseLeftControl?: ManoeuvreOutcome;
  outcomeReverseLeftObservation?: ManoeuvreOutcome;
  selectedReverseRight?: ManoeuvreIndicator;
  outcomeReverseRightControl?: ManoeuvreOutcome;
  outcomeReverseRightObservation?: ManoeuvreOutcome;
  selectedReverseParkRoad?: ManoeuvreIndicator;
  outcomeReverseParkRoadControl?: ManoeuvreOutcome;
  outcomeReverseParkRoadObservation?: ManoeuvreOutcome;
  selectedReverseParkCarpark?: ManoeuvreIndicator;
  outcomeReverseParkCarparkControl?: ManoeuvreOutcome;
  outcomeReverseParkCarparkObservation?: ManoeuvreOutcome;
  selectedForwardPark?: ManoeuvreIndicator;
  outcomeForwardParkControl?: ManoeuvreOutcome;
  outcomeForwardParkObservation?: ManoeuvreOutcome;
  selectedControlledStop?: ManoeuvreIndicator;
  outcomeControlledStop?: ManoeuvreOutcome;
}
/**
 * The driving faults accumulated during the test
 */
export interface DrivingFaults {
  controlsAcceleratorCount?: DrivingFaultCount;
  controlsAcceleratorComments?: FaultComments;
  controlsClutchCount?: DrivingFaultCount;
  controlsClutchComments?: FaultComments;
  controlsGearsCount?: DrivingFaultCount;
  controlsGearsComments?: FaultComments;
  controlsFootbrakeCount?: DrivingFaultCount;
  controlsFootbrakeComments?: FaultComments;
  controlsParkingBrakeCount?: DrivingFaultCount;
  controlsParkingBrakeComments?: FaultComments;
  controlsSteeringCount?: DrivingFaultCount;
  controlsSteeringComments?: FaultComments;
  precautionsCount?: DrivingFaultCount;
  precautionsComments?: FaultComments;
  ancillaryControlsCount?: DrivingFaultCount;
  ancillaryControlsComments?: FaultComments;
  moveOffSafetyCount?: DrivingFaultCount;
  moveOffSafetyComments?: FaultComments;
  moveOffControlCount?: DrivingFaultCount;
  moveOffControlComments?: FaultComments;
  useOfMirrorsSignallingCount?: DrivingFaultCount;
  useOfMirrorsSignallingComments?: FaultComments;
  useOfMirrorsChangeDirectionCount?: DrivingFaultCount;
  useOfMirrorsChangeDirectionComments?: FaultComments;
  useOfMirrorsChangeSpeedCount?: DrivingFaultCount;
  useOfMirrorsChangeSpeedComments?: FaultComments;
  signalsNecessaryCount?: DrivingFaultCount;
  signalsNecessaryComments?: FaultComments;
  signalsCorrectlyCount?: DrivingFaultCount;
  signalsCorrectlyComments?: FaultComments;
  signalsTimedCount?: DrivingFaultCount;
  signalsTimedComments?: FaultComments;
  junctionsApproachSpeedCount?: DrivingFaultCount;
  junctionsApproachSpeedComments?: FaultComments;
  junctionsObservationCount?: DrivingFaultCount;
  junctionsObservationComments?: FaultComments;
  junctionsTurningRightCount?: DrivingFaultCount;
  junctionsTurningRightComments?: FaultComments;
  junctionsTurningLeftCount?: DrivingFaultCount;
  junctionsTurningLeftComments?: FaultComments;
  junctionsCuttingCornersCount?: DrivingFaultCount;
  junctionsCuttingCornersComments?: FaultComments;
  judgementOvertakingCount?: DrivingFaultCount;
  judgementOvertakingComments?: FaultComments;
  judgementMeetingCount?: DrivingFaultCount;
  judgementMeetingComments?: FaultComments;
  judgementCrossingCount?: DrivingFaultCount;
  judgementCrossingComments?: FaultComments;
  positioningNormalDrivingCount?: DrivingFaultCount;
  positioningNormalDrivingComments?: FaultComments;
  positioningLaneDisciplineCount?: DrivingFaultCount;
  positioningLaneDisciplineComments?: FaultComments;
  clearanceCount?: DrivingFaultCount;
  clearanceComments?: FaultComments;
  followingDistanceCount?: DrivingFaultCount;
  followingDistanceComments?: FaultComments;
  useOfSpeedCount?: DrivingFaultCount;
  useOfSpeedComments?: FaultComments;
  progressAppropriateSpeedCount?: DrivingFaultCount;
  progressAppropriateSpeedComments?: FaultComments;
  progressUndueHesitationCount?: DrivingFaultCount;
  progressUndueHesitationComments?: FaultComments;
  responseToSignsTrafficSignsCount?: DrivingFaultCount;
  responseToSignsTrafficSignsComments?: FaultComments;
  responseToSignsRoadMarkingsCount?: DrivingFaultCount;
  responseToSignsRoadMarkingsComments?: FaultComments;
  responseToSignsTrafficLightsCount?: DrivingFaultCount;
  responseToSignsTrafficLightsComments?: FaultComments;
  responseToSignsTrafficControllersCount?: DrivingFaultCount;
  responseToSignsTrafficControllersComments?: FaultComments;
  responseToSignsOtherRoadUsersCount?: DrivingFaultCount;
  responseToSignsOtherRoadUsersComments?: FaultComments;
  pedestrianCrossingsCount?: DrivingFaultCount;
  pedestrianCrossingsComments?: FaultComments;
  positionNormalStopsCount?: DrivingFaultCount;
  positionNormalStopsComments?: FaultComments;
  awarenessPlanningCount?: DrivingFaultCount;
  awarenessPlanningComments?: FaultComments;
}
/**
 * The serious faults accumulated during the test
 */
export interface SeriousFaults {
  controlsAcceleratorIndicator?: SeriousFaultIndicator;
  controlsAcceleratorComments?: FaultComments;
  controlsClutchIndicator?: SeriousFaultIndicator;
  controlsClutchComments?: FaultComments;
  controlsGearsIndicator?: SeriousFaultIndicator;
  controlsGearsComments?: FaultComments;
  controlsFootbrakeIndicator?: SeriousFaultIndicator;
  controlsFootbrakeComments?: FaultComments;
  controlsParkingBrakeIndicator?: SeriousFaultIndicator;
  controlsParkingBrakeComments?: FaultComments;
  controlsSteeringIndicator?: SeriousFaultIndicator;
  controlsSteeringComments?: FaultComments;
  precautionsIndicator?: SeriousFaultIndicator;
  precautionsComments?: FaultComments;
  ancillaryControlsIndicator?: SeriousFaultIndicator;
  ancillaryControlsComments?: FaultComments;
  moveOffSafetyIndicator?: SeriousFaultIndicator;
  moveOffSafetyComments?: FaultComments;
  moveOffControlIndicator?: SeriousFaultIndicator;
  moveOffControlComments?: FaultComments;
  useOfMirrorsSignallingIndicator?: SeriousFaultIndicator;
  useOfMirrorsSignallingComments?: FaultComments;
  useOfMirrorsChangeDirectionIndicator?: SeriousFaultIndicator;
  useOfMirrorsChangeDirectionComments?: FaultComments;
  useOfMirrorsChangeSpeedIndicator?: SeriousFaultIndicator;
  useOfMirrorsChangeSpeedComments?: FaultComments;
  signalsNecessaryIndicator?: SeriousFaultIndicator;
  signalsNecessaryComments?: FaultComments;
  signalsCorrectlyIndicator?: SeriousFaultIndicator;
  signalsCorrectlyComments?: FaultComments;
  signalsTimedIndicator?: SeriousFaultIndicator;
  signalsTimedComments?: FaultComments;
  junctionsApproachSpeedIndicator?: SeriousFaultIndicator;
  junctionsApproachSpeedComments?: FaultComments;
  junctionsObservationIndicator?: SeriousFaultIndicator;
  junctionsObservationComments?: FaultComments;
  junctionsTurningRightIndicator?: SeriousFaultIndicator;
  junctionsTurningRightComments?: FaultComments;
  junctionsTurningLeftIndicator?: SeriousFaultIndicator;
  junctionsTurningLeftComments?: FaultComments;
  junctionsCuttingCornersIndicator?: SeriousFaultIndicator;
  junctionsCuttingCornersComments?: FaultComments;
  judgementOvertakingIndicator?: SeriousFaultIndicator;
  judgementOvertakingComments?: FaultComments;
  judgementMeetingIndicator?: SeriousFaultIndicator;
  judgementMeetingComments?: FaultComments;
  judgementCrossingIndicator?: SeriousFaultIndicator;
  judgementCrossingComments?: FaultComments;
  positioningNormalDrivingIndicator?: SeriousFaultIndicator;
  positioningNormalDrivingComments?: FaultComments;
  positioningLaneDisciplineIndicator?: SeriousFaultIndicator;
  positioningLaneDisciplineComments?: FaultComments;
  clearanceIndicator?: SeriousFaultIndicator;
  clearanceComments?: FaultComments;
  followingDistanceIndicator?: SeriousFaultIndicator;
  followingDistanceComments?: FaultComments;
  useOfSpeedIndicator?: SeriousFaultIndicator;
  useOfSpeedComments?: FaultComments;
  progressAppropriateSpeedIndicator?: SeriousFaultIndicator;
  progressAppropriateSpeedComments?: FaultComments;
  progressUndueHesitationIndicator?: SeriousFaultIndicator;
  progressUndueHesitationComments?: FaultComments;
  responseToSignsTrafficSignsIndicator?: SeriousFaultIndicator;
  responseToSignsTrafficSignsComments?: FaultComments;
  responseToSignsRoadMarkingsIndicator?: SeriousFaultIndicator;
  responseToSignsRoadMarkingsComments?: FaultComments;
  responseToSignsTrafficLightsIndicator?: SeriousFaultIndicator;
  responseToSignsTrafficLightsComments?: FaultComments;
  responseToSignsTrafficControllersIndicator?: SeriousFaultIndicator;
  responseToSignsTrafficControllersComments?: FaultComments;
  responseToSignsOtherRoadUsersIndicator?: SeriousFaultIndicator;
  responseToSignsOtherRoadUsersComments?: FaultComments;
  pedestrianCrossingsIndicator?: SeriousFaultIndicator;
  pedestrianCrossingsComments?: FaultComments;
  positionNormalStopsIndicator?: SeriousFaultIndicator;
  positionNormalStopsComments?: FaultComments;
  awarenessPlanningIndicator?: SeriousFaultIndicator;
  awarenessPlanningComments?: FaultComments;
}
/**
 * The dangerous faults accumulated during the test
 */
export interface DangerousFaults {
  controlsAcceleratorIndicator?: DangerousFaultIndicator;
  controlsAcceleratorComments?: FaultComments;
  controlsClutchIndicator?: DangerousFaultIndicator;
  controlsClutchComments?: FaultComments;
  controlsGearsIndicator?: DangerousFaultIndicator;
  controlsGearsComments?: FaultComments;
  controlsFootbrakeIndicator?: DangerousFaultIndicator;
  controlsFootbrakeComments?: FaultComments;
  controlsParkingBrakeIndicator?: DangerousFaultIndicator;
  controlsParkingBrakeComments?: FaultComments;
  controlsSteeringIndicator?: DangerousFaultIndicator;
  controlsSteeringComments?: FaultComments;
  precautionsIndicator?: DangerousFaultIndicator;
  precautionsComments?: FaultComments;
  ancillaryControlsIndicator?: DangerousFaultIndicator;
  ancillaryControlsComments?: FaultComments;
  moveOffSafetyIndicator?: DangerousFaultIndicator;
  moveOffSafetyComments?: FaultComments;
  moveOffControlIndicator?: DangerousFaultIndicator;
  moveOffControlComments?: FaultComments;
  useOfMirrorsSignallingIndicator?: DangerousFaultIndicator;
  useOfMirrorsSignallingComments?: FaultComments;
  useOfMirrorsChangeDirectionIndicator?: DangerousFaultIndicator;
  useOfMirrorsChangeDirectionComments?: FaultComments;
  useOfMirrorsChangeSpeedIndicator?: DangerousFaultIndicator;
  useOfMirrorsChangeSpeedComments?: FaultComments;
  signalsNecessaryIndicator?: DangerousFaultIndicator;
  signalsNecessaryComments?: FaultComments;
  signalsCorrectlyIndicator?: DangerousFaultIndicator;
  signalsCorrectlyComments?: FaultComments;
  signalsTimedIndicator?: DangerousFaultIndicator;
  signalsTimedComments?: FaultComments;
  junctionsApproachSpeedIndicator?: DangerousFaultIndicator;
  junctionsApproachSpeedComments?: FaultComments;
  junctionsObservationIndicator?: DangerousFaultIndicator;
  junctionsObservationComments?: FaultComments;
  junctionsTurningRightIndicator?: DangerousFaultIndicator;
  junctionsTurningRightComments?: FaultComments;
  junctionsTurningLeftIndicator?: DangerousFaultIndicator;
  junctionsTurningLeftComments?: FaultComments;
  junctionsCuttingCornersIndicator?: DangerousFaultIndicator;
  junctionsCuttingCornersComments?: FaultComments;
  judgementOvertakingIndicator?: DangerousFaultIndicator;
  judgementOvertakingComments?: FaultComments;
  judgementMeetingIndicator?: DangerousFaultIndicator;
  judgementMeetingComments?: FaultComments;
  judgementCrossingIndicator?: DangerousFaultIndicator;
  judgementCrossingComments?: FaultComments;
  positioningNormalDrivingIndicator?: DangerousFaultIndicator;
  positioningNormalDrivingComments?: FaultComments;
  positioningLaneDisciplineIndicator?: DangerousFaultIndicator;
  positioningLaneDisciplineComments?: FaultComments;
  clearanceIndicator?: DangerousFaultIndicator;
  clearanceComments?: FaultComments;
  followingDistanceIndicator?: DangerousFaultIndicator;
  followingDistanceComments?: FaultComments;
  useOfSpeedIndicator?: DangerousFaultIndicator;
  useOfSpeedComments?: FaultComments;
  progressAppropriateSpeedIndicator?: DangerousFaultIndicator;
  progressAppropriateSpeedComments?: FaultComments;
  progressUndueHesitationIndicator?: DangerousFaultIndicator;
  progressUndueHesitationComments?: FaultComments;
  responseToSignsTrafficSignsIndicator?: DangerousFaultIndicator;
  responseToSignsTrafficSignsComments?: FaultComments;
  responseToSignsRoadMarkingsIndicator?: DangerousFaultIndicator;
  responseToSignsRoadMarkingsComments?: FaultComments;
  responseToSignsTrafficLightsIndicator?: DangerousFaultIndicator;
  responseToSignsTrafficLightsComments?: FaultComments;
  responseToSignsTrafficControllersIndicator?: DangerousFaultIndicator;
  responseToSignsTrafficControllersComments?: FaultComments;
  responseToSignsOtherRoadUsersIndicator?: DangerousFaultIndicator;
  responseToSignsOtherRoadUsersComments?: FaultComments;
  pedestrianCrossingsIndicator?: DangerousFaultIndicator;
  pedestrianCrossingsComments?: FaultComments;
  positionNormalStopsIndicator?: DangerousFaultIndicator;
  positionNormalStopsComments?: FaultComments;
  awarenessPlanningIndicator?: DangerousFaultIndicator;
  awarenessPlanningComments?: FaultComments;
}
/**
 * Assessment of the eco friendly manner of driving
 */
export interface Eco {
  /**
   * Indicates that the eco friendly manner of driving has been assessed
   */
  completed?: boolean;
  /**
   * Indicates that advice was given on the Control aspect of eco driving
   */
  adviceGivenControl?: boolean;
  /**
   * Indicates that advice was given on the Planning aspect of eco driving
   */
  adviceGivenPlanning?: boolean;
}
/**
 * Indicates whether the examiner had to take physical or verbal action during the test
 */
export interface ETA {
  /**
   * Indicates that the examiner had to take physical action
   */
  physical?: boolean;
  /**
   * Indicates that the examiner had to take verbal action
   */
  verbal?: boolean;
}
/**
 * Summary of the total number of each type of fault incurred during the test
 */
export interface FaultSummary {
  /**
   * Count of the total number of driving faults incurred during the test
   */
  totalDrivingFaults?: number;
  /**
   * Count of the total number of serious faults incurred during the test
   */
  totalSeriousFaults?: number;
  /**
   * Count of the total number of dangerous faults incurred during the test
   */
  totalDangerousFaults?: number;
  [k: string]: any;
}
/**
 * Finalisation of a successful test outcome
 */
export interface PassCompletion {
  /**
   * Indicates whether the candidate submitted their provisional driving licence
   */
  provisionalLicenceProvided: boolean;
  /**
   * The PCN issued to the candidate
   */
  passCertificateNumber: string;
}
export interface PostTestDeclarations {
  /**
   * Whether or not the candidate has declared that their health status hasn't changed since their last application
   */
  healthDeclarationAccepted?: boolean;
  /**
   * Indicates whether the candidate acknowledges receipt of the PCN
   */
  passCertificateNumberReceived?: boolean;
  postTestSignature?: Signature;
}
/**
 * Recording of other characteristics of the test
 */
export interface TestSummary {
  /**
   * Number of the route that was taken during the test
   */
  routeNumber?: number;
  /**
   * Method chosen to conduct the independent driving section of the test
   */
  independentDriving?: "Sat nav" | "Traffic signs";
  /**
   * Physical description of the candidate
   */
  candidateDescription?: string;
  /**
   * Indicates whether anybody else (e.g. ADI) was present for the debrief
   */
  debriefWitnessed?: boolean;
  /**
   * Indicates which form of ID was provided by the candidate
   */
  identification?: "Licence" | "Passport";
  /**
   * Description of the type of weather encountered during the test
   */
  weatherConditions?: WeatherConditions[];
  /**
   * Indicates whether a D255 form needs to be completed
   */
  D255?: boolean;
  /**
   * Any comments that the DE wants to record about the test
   */
  additionalInformation?: string;
  [k: string]: any;
}
